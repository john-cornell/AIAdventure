import { loadConfig } from './config.js';
/**
 * Generate images locally using Stable Diffusion
 * @param prompt - Image generation prompt
 * @param width - Image width (optional, uses config default)
 * @param height - Image height (optional, uses config default)
 * @returns Base64 encoded image data
 */
export async function generateLocalImage(prompt, width, height) {
    const config = loadConfig();
    const sdUrl = config.stableDiffusion.url;
    const model = config.stableDiffusion.model;
    const options = config.stableDiffusion.options;
    // Use provided dimensions or config defaults
    const imageWidth = width || options.width;
    const imageHeight = height || options.height;
    try {
        const response = await fetch(`${sdUrl}/sdapi/v1/txt2img`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                prompt: prompt,
                negative_prompt: "blurry, low quality, distorted, ugly, bad anatomy",
                steps: options.steps,
                cfg_scale: options.cfg_scale,
                width: imageWidth,
                height: imageHeight,
                sampler_name: options.sampler_name,
                batch_size: 1
            })
        });
        if (!response.ok) {
            throw new Error(`Stable Diffusion API error: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        if (!data.images || data.images.length === 0) {
            throw new Error('No image generated by Stable Diffusion');
        }
        // Return the first generated image
        return data.images[0];
    }
    catch (error) {
        console.error('Stable Diffusion API call failed:', error);
        throw error;
    }
}
/**
 * Discover available Stable Diffusion models
 * @param url - SD server URL (optional)
 * @returns Array of available model information
 */
export async function getAvailableSDModels(url) {
    const config = loadConfig();
    const sdUrl = url || config.stableDiffusion.url;
    try {
        const response = await fetch(`${sdUrl}/sdapi/v1/sd-models`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error(`Failed to fetch SD models: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        return data || [];
    }
    catch (error) {
        console.error('Failed to fetch Stable Diffusion models:', error);
        throw error;
    }
}
/**
 * Test Stable Diffusion connection and model availability
 * @param url - SD server URL
 * @param model - Model name to test
 * @returns Test result with status and details
 */
export async function testSDConnection(url, model) {
    const testResult = {
        success: false,
        message: '',
        details: {}
    };
    try {
        // Test 0: Check if server is reachable at all
        const healthResponse = await fetch(`${url}/`, {
            method: 'GET',
            headers: { 'Accept': 'text/html' }
        });
        if (!healthResponse.ok) {
            testResult.message = `Server unreachable: ${healthResponse.status} ${healthResponse.statusText}`;
            return testResult;
        }
        // Test 1: Check if API is enabled
        const modelsResponse = await fetch(`${url}/sdapi/v1/sd-models`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });
        if (!modelsResponse.ok) {
            testResult.message = `Server unreachable: ${modelsResponse.status} ${modelsResponse.statusText}`;
            return testResult;
        }
        const modelsData = await modelsResponse.json();
        const availableModels = modelsData || [];
        // Test 2: Check if specified model exists (if model name provided)
        if (model && model !== 'default') {
            const modelExists = availableModels.some(m => m.model_name === model);
            if (!modelExists) {
                testResult.message = `Model '${model}' not found. Available models: ${availableModels.map(m => m.model_name).join(', ')}`;
                testResult.details.availableModels = availableModels.map(m => m.model_name);
                return testResult;
            }
        }
        // Test 3: Test actual image generation with a simple prompt
        const testPrompt = "a simple red circle on white background";
        const testResponse = await fetch(`${url}/sdapi/v1/txt2img`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                prompt: testPrompt,
                negative_prompt: "blurry, low quality",
                steps: 5, // Fast test
                cfg_scale: 7,
                width: 64, // Small test image
                height: 64,
                sampler_name: "Euler a",
                batch_size: 1
            })
        });
        if (!testResponse.ok) {
            testResult.message = `Generation test failed: ${testResponse.status} ${testResponse.statusText}`;
            return testResult;
        }
        const testData = await testResponse.json();
        if (!testData.images || testData.images.length === 0) {
            testResult.message = 'Generation test failed: No image received';
            return testResult;
        }
        // Success
        testResult.success = true;
        testResult.message = `Connection successful! Stable Diffusion is ready.`;
        testResult.details = {
            availableModels: availableModels.map(m => m.model_name),
            selectedModel: model,
            testImageSize: testData.images[0].length
        };
    }
    catch (error) {
        testResult.message = `Connection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`;
        console.error('Stable Diffusion connection test error:', error);
    }
    return testResult;
}
/**
 * Switch Stable Diffusion model
 * @param modelName - Name of the model to switch to
 * @returns Success status
 */
export async function switchSDModel(modelName) {
    const config = loadConfig();
    const sdUrl = config.stableDiffusion.url;
    try {
        const response = await fetch(`${sdUrl}/sdapi/v1/options`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sd_model_checkpoint: modelName
            })
        });
        if (!response.ok) {
            throw new Error(`Failed to switch model: ${response.status} ${response.statusText}`);
        }
        return true;
    }
    catch (error) {
        console.error('Failed to switch SD model:', error);
        throw error;
    }
}
/**
 * Get current Stable Diffusion model
 * @returns Current model information
 */
export async function getCurrentSDModel() {
    const config = loadConfig();
    const sdUrl = config.stableDiffusion.url;
    try {
        const response = await fetch(`${sdUrl}/sdapi/v1/options`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error(`Failed to get current model: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        return data.sd_model_checkpoint || 'unknown';
    }
    catch (error) {
        console.error('Failed to get current SD model:', error);
        throw error;
    }
}
/**
 * Enhanced image generation with retry logic
 * @param prompt - Image generation prompt
 * @param width - Image width
 * @param height - Image height
 * @param maxRetries - Maximum retry attempts
 * @returns Base64 encoded image data
 */
export async function generateLocalImageWithRetry(prompt, width, height, maxRetries = 3) {
    let lastError;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            return await generateLocalImage(prompt, width, height);
        }
        catch (error) {
            lastError = error instanceof Error ? error : new Error('Unknown error');
            console.warn(`SD generation attempt ${attempt} failed:`, lastError.message);
            if (attempt < maxRetries) {
                // Exponential backoff: wait 2s, 4s, 8s...
                const delay = Math.pow(2, attempt) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    throw new Error(`SD generation failed after ${maxRetries} attempts. Last error: ${lastError.message}`);
}
//# sourceMappingURL=stable-diffusion.js.map